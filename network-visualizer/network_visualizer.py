import scapy.all as scapy
import networkx as nx
import matplotlib.pyplot as plt
import ipaddress
import threading
from datetime import datetime
import time
from collections import defaultdict
import platform
import subprocess
import re


class NetworkScanner:
    def __init__(self):
        self.network_graph = nx.Graph()
        self.devices = {}
        self.scanning = False
        self.local_ip = self.get_local_ip()
        self.network_range = self.get_network_range()

    def get_local_ip(self):
        """–í–∑–µ–º–∞ –ª–æ–∫–∞–ª–Ω–∏—è IP –∞–¥—Ä–µ—Å"""
        try:
            # –°—ä–∑–¥–∞–≤–∞–º–µ –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–∫–µ—Ç—á–µ –∑–∞ –¥–∞ –≤–∑–µ–º–µ–º –ª–æ–∫–∞–ª–Ω–∏—è IP
            import socket
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            local_ip = s.getsockname()[0]
            s.close()
            return local_ip
        except:
            return "192.168.1.1"  # fallback

    def get_network_range(self):
        """–û–ø—Ä–µ–¥–µ–ª—è –º—Ä–µ–∂–æ–≤–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω –±–∞–∑–∏—Ä–∞–Ω–æ –Ω–∞ –ª–æ–∫–∞–ª–Ω–∏—è IP"""
        try:
            ip = ipaddress.IPv4Address(self.local_ip)
            network = ipaddress.IPv4Network(f"{ip}/24", strict=False)
            return str(network)
        except:
            return "192.168.1.0/24"  # fallback

    def get_gateway_ip(self):
        """–í–∑–µ–º–∞ IP –∞–¥—Ä–µ—Å–∞ –Ω–∞ —Ä—É—Ç–µ—Ä–∞/–≥–∞—Ç—É—ä—è"""
        try:
            if platform.system() == "Windows":
                result = subprocess.run(["ipconfig"], capture_output=True, text=True)
                lines = result.stdout.split('\n')
                for line in lines:
                    if "Default Gateway" in line:
                        ip = re.findall(r'[0-9]+(?:\.[0-9]+){3}', line)
                        if ip:
                            return ip[0]
            else:  # Linux/Mac
                result = subprocess.run(["ip", "route"], capture_output=True, text=True)
                lines = result.stdout.split('\n')
                for line in lines:
                    if "default" in line:
                        ip = re.findall(r'[0-9]+(?:\.[0-9]+){3}', line)
                        if ip:
                            return ip[0]
        except:
            pass
        return self.local_ip  # fallback

    def arp_scan(self, network_range=None):
        """–ò–∑–≤—ä—Ä—à–≤–∞ ARP —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ –Ω–∞ –º—Ä–µ–∂–∞—Ç–∞"""
        if network_range is None:
            network_range = self.network_range

        print(f"üîç –°–∫–∞–Ω–∏—Ä–∞–Ω–µ –Ω–∞ –º—Ä–µ–∂–∞: {network_range}")

        # –°—ä–∑–¥–∞–≤–∞–º–µ ARP –∑–∞—è–≤–∫–∞
        arp_request = scapy.ARP(pdst=network_range)
        broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
        arp_request_broadcast = broadcast / arp_request

        # –ò–∑–ø—Ä–∞—â–∞–º–µ –∑–∞—è–≤–∫–∞—Ç–∞ –∏ –ø–æ–ª—É—á–∞–≤–∞–º–µ –æ—Ç–≥–æ–≤–æ—Ä–∏
        answered_list = scapy.srp(arp_request_broadcast, timeout=2, verbose=False)[0]

        devices = []
        for element in answered_list:
            device_info = {
                'ip': element[1].psrc,
                'mac': element[1].hwsrc,
                'vendor': self.get_vendor_from_mac(element[1].hwsrc),
                'hostname': self.get_hostname(element[1].psrc),
                'last_seen': datetime.now(),
                'type': self.classify_device(element[1].hwsrc, element[1].psrc)
            }
            devices.append(device_info)

        return devices

    def get_vendor_from_mac(self, mac_address):
        """–û–ø–∏—Ç–≤–∞ —Å–µ –¥–∞ –æ–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –ø–æ MAC –∞–¥—Ä–µ—Å"""
        try:
            # –ë–∞–∑–∞ –¥–∞–Ω–Ω–∏ —Å –∏–∑–≤–µ—Å—Ç–Ω–∏ OUI (Organizationally Unique Identifier)
            oui_database = {
                "00:1B:44": "Cisco",
                "00:0C:29": "VMware",
                "00:50:56": "VMware",
                "00:1A:11": "Google",
                "00:1D:72": "HP",
                "00:24:81": "Dell",
                "00:26:BB": "Apple",
                "00:1E:C9": "Samsung",
                "00:23:12": "Intel",
                "00:1F:5B": "Netgear",
                "00:22:5F": "Microsoft",
                "00:25:BC": "ASUS",
                "00:1E:65": "TP-Link",
                "00:21:6A": "Linksys",
                "00:1C:B3": "Belkin",
                "00:14:A4": "Raspberry Pi",
                "DC:A6:32": "Raspberry Pi"
            }

            oui = mac_address.upper()[:8]
            return oui_database.get(oui, "Unknown Vendor")
        except:
            return "Unknown"

    def get_hostname(self, ip):
        """–û–ø–∏—Ç–≤–∞ —Å–µ –¥–∞ –ø–æ–ª—É—á–∏ hostname –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ—Ç–æ"""
        try:
            import socket
            hostname = socket.gethostbyaddr(ip)[0]
            return hostname
        except:
            return "Unknown"

    def classify_device(self, mac, ip):
        """–ö–ª–∞—Å–∏—Ñ–∏—Ü–∏—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ—Ç–æ –ø–æ —Ç–∏–ø"""
        vendor = self.get_vendor_from_mac(mac).lower()

        if any(keyword in vendor for keyword in ['cisco', 'netgear', 'tp-link', 'linksys']):
            return "Router/Network"
        elif any(keyword in vendor for keyword in ['vmware', 'virtualbox']):
            return "Virtual Machine"
        elif any(keyword in vendor for keyword in ['apple']):
            return "Apple Device"
        elif any(keyword in vendor for keyword in ['raspberry']):
            return "Raspberry Pi"
        elif ip == self.local_ip:
            return "This Computer"
        else:
            return "Generic Device"

    def continuous_scan(self, interval=60):
        """–ù–µ–ø—Ä–µ–∫—ä—Å–Ω–∞—Ç–æ —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ –Ω–∞ –º—Ä–µ–∂–∞—Ç–∞"""
        self.scanning = True
        while self.scanning:
            try:
                new_devices = self.arp_scan()
                self.update_network_graph(new_devices)
                time.sleep(interval)
            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ: {e}")
                time.sleep(interval)

    def update_network_graph(self, devices):
        """–û–±–Ω–æ–≤—è–≤–∞ –º—Ä–µ–∂–æ–≤–∏—è –≥—Ä–∞—Ñ —Å –Ω–æ–≤–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        gateway_ip = self.get_gateway_ip()

        # –î–æ–±–∞–≤—è–º–µ —Ä—É—Ç–µ—Ä–∞ –∫–∞—Ç–æ —Ü–µ–Ω—Ç—Ä–∞–ª–µ–Ω –≤—ä–∑–µ–ª
        self.network_graph.add_node(
            gateway_ip,
            type="Router",
            label="Router/Gateway",
            color="red",
            size=500
        )

        # –î–æ–±–∞–≤—è–º–µ –≤—Å–∏—á–∫–∏ –æ—Ç–∫—Ä–∏—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        for device in devices:
            device_ip = device['ip']

            self.network_graph.add_node(
                device_ip,
                type=device['type'],
                label=f"{device_ip}\n{device['vendor']}",
                mac=device['mac'],
                vendor=device['vendor'],
                hostname=device['hostname'],
                color=self.get_device_color(device['type']),
                size=self.get_device_size(device['type'])
            )

            # –°–≤—ä—Ä–∑–≤–∞–º–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ—Ç–æ —Å —Ä—É—Ç–µ—Ä–∞
            self.network_graph.add_edge(gateway_ip, device_ip, weight=1)

        self.devices = {device['ip']: device for device in devices}

    def get_device_color(self, device_type):
        """–í—Ä—ä—â–∞ —Ü–≤—è—Ç –∑–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø—Ä—è–º–æ —Ç–∏–ø–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ—Ç–æ"""
        colors = {
            "Router/Network": "red",
            "This Computer": "blue",
            "Apple Device": "gray",
            "Virtual Machine": "purple",
            "Raspberry Pi": "green",
            "Generic Device": "orange"
        }
        return colors.get(device_type, "yellow")

    def get_device_size(self, device_type):
        """–í—Ä—ä—â–∞ —Ä–∞–∑–º–µ—Ä –∑–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø—Ä—è–º–æ —Ç–∏–ø–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ—Ç–æ"""
        sizes = {
            "Router/Network": 800,
            "This Computer": 600,
            "Apple Device": 400,
            "Virtual Machine": 350,
            "Raspberry Pi": 450,
            "Generic Device": 300
        }
        return sizes.get(device_type, 300)


class NetworkVisualizer:
    def __init__(self, network_scanner):
        self.scanner = network_scanner
        self.fig = None
        self.ax = None

    def visualize_network(self):
        """–í–∏–∑—É–∞–ª–∏–∑–∏—Ä–∞ –º—Ä–µ–∂–æ–≤–∏—è –≥—Ä–∞—Ñ"""
        if len(self.scanner.network_graph.nodes()) == 0:
            print("‚ùå –ù—è–º–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è. –ü—ä—Ä–≤–æ –∏–∑–ø—ä–ª–Ω–∏ —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ!")
            return

        plt.figure(figsize=(14, 10))

        # –í–∑–µ–º–∞–º–µ –ø–æ–∑–∏—Ü–∏–∏—Ç–µ –Ω–∞ –≤—ä–∑–ª–∏—Ç–µ
        pos = nx.spring_layout(self.scanner.network_graph, k=2, iterations=50)

        # –í–∑–µ–º–∞–º–µ –∞—Ç—Ä–∏–±—É—Ç–∏—Ç–µ –∑–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        node_colors = []
        node_sizes = []
        labels = {}

        for node in self.scanner.network_graph.nodes():
            node_data = self.scanner.network_graph.nodes[node]
            node_colors.append(node_data.get('color', 'gray'))
            node_sizes.append(node_data.get('size', 300))
            labels[node] = node_data.get('label', node)

        # –†–∏—Å—É–≤–∞–º–µ –≥—Ä–∞—Ñ–∞
        nx.draw_networkx_nodes(
            self.scanner.network_graph, pos,
            node_color=node_colors,
            node_size=node_sizes,
            alpha=0.9
        )

        nx.draw_networkx_edges(
            self.scanner.network_graph, pos,
            edge_color='gray',
            width=2,
            alpha=0.6
        )

        nx.draw_networkx_labels(
            self.scanner.network_graph, pos,
            labels=labels,
            font_size=8,
            font_weight='bold'
        )

        # –î–æ–±–∞–≤—è–º–µ –ª–µ–≥–µ–Ω–¥–∞
        self._add_legend()

        plt.title("üåê –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –ª–æ–∫–∞–ª–Ω–∞—Ç–∞ –º—Ä–µ–∂–∞\n(–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–≤—ä—Ä–∑–∞–Ω–∏ –∫—ä–º —Ä—É—Ç–µ—Ä–∞)",
                  fontsize=16, fontweight='bold', pad=20)
        plt.axis('off')
        plt.tight_layout()
        plt.show()

    def _add_legend(self):
        """–î–æ–±–∞–≤—è –ª–µ–≥–µ–Ω–¥–∞ –∫—ä–º –≥—Ä–∞—Ñ–∏–∫–∞—Ç–∞"""
        legend_elements = [
            plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='red', markersize=10, label='Router/Network'),
            plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='blue', markersize=10, label='This Computer'),
            plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='green', markersize=10, label='Raspberry Pi'),
            plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='purple', markersize=10,
                       label='Virtual Machine'),
            plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='gray', markersize=10, label='Apple Device'),
            plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='orange', markersize=10, label='Other Devices')
        ]

        plt.legend(handles=legend_elements, loc='upper left', bbox_to_anchor=(0, 1))

    def print_network_info(self):
        """–ü—Ä–∏–Ω—Ç–∏—Ä–∞ –¥–µ—Ç–∞–π–ª–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –º—Ä–µ–∂–∞—Ç–∞"""
        print("\n" + "=" * 60)
        print("üìä –î–ï–¢–ê–ô–õ–ò –ó–ê –õ–û–ö–ê–õ–ù–ê–¢–ê –ú–†–ï–ñ–ê")
        print("=" * 60)

        print(f"üìç –õ–æ–∫–∞–ª–µ–Ω IP: {self.scanner.local_ip}")
        print(f"üåç –ú—Ä–µ–∂–æ–≤ –¥–∏–∞–ø–∞–∑–æ–Ω: {self.scanner.network_range}")
        print(f"üîÑ –†—É—Ç–µ—Ä/Gateway: {self.scanner.get_gateway_ip()}")
        print(f"üîç –û—Ç–∫—Ä–∏—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {len(self.scanner.devices)}")

        print("\nüìã –°–ü–ò–°–™–ö –° –£–°–¢–†–û–ô–°–¢–í–ê:")
        print("-" * 60)

        for ip, device in self.scanner.devices.items():
            print(f"IP: {ip}")
            print(f"  MAC: {device['mac']}")
            print(f"  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª: {device['vendor']}")
            print(f"  Hostname: {device['hostname']}")
            print(f"  –¢–∏–ø: {device['type']}")
            print(f"  –ü–æ—Å–ª–µ–¥–Ω–æ –≤–∏–¥—è–Ω: {device['last_seen'].strftime('%Y-%m-%d %H:%M:%S')}")
            print("-" * 40)


class NetworkMonitorApp:
    def __init__(self):
        self.scanner = NetworkScanner()
        self.visualizer = NetworkVisualizer(self.scanner)
        self.scan_thread = None

    def run_single_scan(self):
        """–ò–∑–ø—ä–ª–Ω—è–≤–∞ –µ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ"""
        print("üöÄ –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –µ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ...")
        devices = self.scanner.arp_scan()
        self.scanner.update_network_graph(devices)

        print(f"‚úÖ –û—Ç–∫—Ä–∏—Ç–∏ —Å–∞ {len(devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        self.visualizer.print_network_info()
        self.visualizer.visualize_network()

    def run_continuous_monitor(self, interval=60):
        """–°—Ç–∞—Ä—Ç–∏—Ä–∞ –Ω–µ–ø—Ä–µ–∫—ä—Å–Ω–∞—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        print(f"üîç –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–µ–ø—Ä–µ–∫—ä—Å–Ω–∞—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫—É–Ω–¥–∏)")
        print("–ù–∞—Ç–∏—Å–Ω–∏ Ctrl+C –∑–∞ —Å–ø–∏—Ä–∞–Ω–µ...")

        try:
            self.scan_thread = threading.Thread(
                target=self.scanner.continuous_scan,
                args=(interval,)
            )
            self.scan_thread.daemon = True
            self.scan_thread.start()

            # –ü–æ–∑–≤–æ–ª—è–≤–∞–º–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –¥–∞ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–∞ –ø–æ –≤—Å—è–∫–æ –≤—Ä–µ–º–µ
            while True:
                time.sleep(5)
                choice = input("\nüéÆ –ù–∞—Ç–∏—Å–Ω–∏ 'v' –∑–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è, 'q' –∑–∞ –∏–∑—Ö–æ–¥: ").lower()
                if choice == 'v':
                    self.visualizer.visualize_network()
                elif choice == 'q':
                    self.scanner.scanning = False
                    break

        except KeyboardInterrupt:
            self.scanner.scanning = False
            print("\n‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—ä—Ç –µ —Å–ø—Ä—è–Ω")

    def show_menu(self):
        """–ü–æ–∫–∞–∑–≤–∞ –≥–ª–∞–≤–Ω–æ—Ç–æ –º–µ–Ω—é"""
        while True:
            print("\n" + "=" * 50)
            print("üåê –ú–†–ï–ñ–û–í –í–ò–ó–£–ê–õ–ò–ó–ê–¢–û–†")
            print("=" * 50)
            print("1. –ï–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
            print("2. –ù–µ–ø—Ä–µ–∫—ä—Å–Ω–∞—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
            print("3. –ü–æ–∫–∞–∂–∏ –º—Ä–µ–∂–æ–≤–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            print("4. –¢–µ—Å—Ç–æ–≤–æ —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω)")
            print("5. –ò–∑—Ö–æ–¥")

            choice = input("–ò–∑–±–µ—Ä–∏ –æ–ø—Ü–∏—è: ")

            if choice == "1":
                self.run_single_scan()
            elif choice == "2":
                interval = int(input("–ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ (—Å–µ–∫—É–Ω–¥–∏) [60]: ") or "60")
                self.run_continuous_monitor(interval)
            elif choice == "3":
                self.visualizer.print_network_info()
            elif choice == "4":
                self.run_test_scan()
            elif choice == "5":
                if self.scanner.scanning:
                    self.scanner.scanning = False
                print("üëã –ò–∑–ª–∏–∑–∞–Ω–µ –æ—Ç –ø—Ä–æ–≥—Ä–∞–º–∞—Ç–∞...")
                break
            else:
                print("‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω –∏–∑–±–æ—Ä!")

    def run_test_scan(self):
        """–ò–∑–ø—ä–ª–Ω—è–≤–∞ —Ç–µ—Å—Ç–æ–≤–æ —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω"""
        test_range = input("–í—ä–≤–µ–¥–∏ –º—Ä–µ–∂–æ–≤ –¥–∏–∞–ø–∞–∑–æ–Ω [192.168.1.0/24]: ") or "192.168.1.0/24"
        print(f"üîç –¢–µ—Å—Ç–æ–≤–æ —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ –Ω–∞ {test_range}...")

        devices = self.scanner.arp_scan(test_range)
        self.scanner.update_network_graph(devices)

        print(f"‚úÖ –û—Ç–∫—Ä–∏—Ç–∏ —Å–∞ {len(devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        self.visualizer.print_network_info()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–ê–ù–ï –ù–ê –ú–†–ï–ñ–û–í–ò–Ø –í–ò–ó–£–ê–õ–ò–ó–ê–¢–û–†...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    try:
        import scapy.all
        import networkx
    except ImportError as e:
        print(f"‚ùå –õ–∏–ø—Å–≤–∞—â–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {e}")
        print("üì¶ –ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–π —Å: pip install scapy networkx matplotlib")
        return

    app = NetworkMonitorApp()
    app.show_menu()


if __name__ == "__main__":
    main()